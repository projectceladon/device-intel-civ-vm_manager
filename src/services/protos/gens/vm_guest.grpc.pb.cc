// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: vm_guest.proto

#include "vm_guest.pb.h"
#include "vm_guest.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace vm_manager {

static const char* CivPowerCtl_method_names[] = {
  "/vm_manager.CivPowerCtl/Shutdown",
};

std::unique_ptr< CivPowerCtl::Stub> CivPowerCtl::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< CivPowerCtl::Stub> stub(new CivPowerCtl::Stub(channel, options));
  return stub;
}

CivPowerCtl::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Shutdown_(CivPowerCtl_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status CivPowerCtl::Stub::Shutdown(::grpc::ClientContext* context, const ::vm_manager::EmptyMessage& request, ::vm_manager::EmptyMessage* response) {
  return ::grpc::internal::BlockingUnaryCall< ::vm_manager::EmptyMessage, ::vm_manager::EmptyMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Shutdown_, context, request, response);
}

void CivPowerCtl::Stub::async::Shutdown(::grpc::ClientContext* context, const ::vm_manager::EmptyMessage* request, ::vm_manager::EmptyMessage* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::vm_manager::EmptyMessage, ::vm_manager::EmptyMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Shutdown_, context, request, response, std::move(f));
}

void CivPowerCtl::Stub::async::Shutdown(::grpc::ClientContext* context, const ::vm_manager::EmptyMessage* request, ::vm_manager::EmptyMessage* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Shutdown_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::vm_manager::EmptyMessage>* CivPowerCtl::Stub::PrepareAsyncShutdownRaw(::grpc::ClientContext* context, const ::vm_manager::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::vm_manager::EmptyMessage, ::vm_manager::EmptyMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Shutdown_, context, request);
}

::grpc::ClientAsyncResponseReader< ::vm_manager::EmptyMessage>* CivPowerCtl::Stub::AsyncShutdownRaw(::grpc::ClientContext* context, const ::vm_manager::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncShutdownRaw(context, request, cq);
  result->StartCall();
  return result;
}

CivPowerCtl::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CivPowerCtl_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CivPowerCtl::Service, ::vm_manager::EmptyMessage, ::vm_manager::EmptyMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CivPowerCtl::Service* service,
             ::grpc::ServerContext* ctx,
             const ::vm_manager::EmptyMessage* req,
             ::vm_manager::EmptyMessage* resp) {
               return service->Shutdown(ctx, req, resp);
             }, this)));
}

CivPowerCtl::Service::~Service() {
}

::grpc::Status CivPowerCtl::Service::Shutdown(::grpc::ServerContext* context, const ::vm_manager::EmptyMessage* request, ::vm_manager::EmptyMessage* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* CivAppLauncher_method_names[] = {
  "/vm_manager.CivAppLauncher/LaunchApp",
};

std::unique_ptr< CivAppLauncher::Stub> CivAppLauncher::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< CivAppLauncher::Stub> stub(new CivAppLauncher::Stub(channel, options));
  return stub;
}

CivAppLauncher::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_LaunchApp_(CivAppLauncher_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status CivAppLauncher::Stub::LaunchApp(::grpc::ClientContext* context, const ::vm_manager::AppLaunchRequest& request, ::vm_manager::AppLaunchResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::vm_manager::AppLaunchRequest, ::vm_manager::AppLaunchResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_LaunchApp_, context, request, response);
}

void CivAppLauncher::Stub::async::LaunchApp(::grpc::ClientContext* context, const ::vm_manager::AppLaunchRequest* request, ::vm_manager::AppLaunchResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::vm_manager::AppLaunchRequest, ::vm_manager::AppLaunchResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_LaunchApp_, context, request, response, std::move(f));
}

void CivAppLauncher::Stub::async::LaunchApp(::grpc::ClientContext* context, const ::vm_manager::AppLaunchRequest* request, ::vm_manager::AppLaunchResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_LaunchApp_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::vm_manager::AppLaunchResponse>* CivAppLauncher::Stub::PrepareAsyncLaunchAppRaw(::grpc::ClientContext* context, const ::vm_manager::AppLaunchRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::vm_manager::AppLaunchResponse, ::vm_manager::AppLaunchRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_LaunchApp_, context, request);
}

::grpc::ClientAsyncResponseReader< ::vm_manager::AppLaunchResponse>* CivAppLauncher::Stub::AsyncLaunchAppRaw(::grpc::ClientContext* context, const ::vm_manager::AppLaunchRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncLaunchAppRaw(context, request, cq);
  result->StartCall();
  return result;
}

CivAppLauncher::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CivAppLauncher_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CivAppLauncher::Service, ::vm_manager::AppLaunchRequest, ::vm_manager::AppLaunchResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CivAppLauncher::Service* service,
             ::grpc::ServerContext* ctx,
             const ::vm_manager::AppLaunchRequest* req,
             ::vm_manager::AppLaunchResponse* resp) {
               return service->LaunchApp(ctx, req, resp);
             }, this)));
}

CivAppLauncher::Service::~Service() {
}

::grpc::Status CivAppLauncher::Service::LaunchApp(::grpc::ServerContext* context, const ::vm_manager::AppLaunchRequest* request, ::vm_manager::AppLaunchResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace vm_manager

